(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{168:function(s,t,a){"use strict";a.r(t);var n=a(0),e=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("div",{staticClass:"content"},[a("h1",{attrs:{id:"asynchronous-archiving"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#asynchronous-archiving","aria-hidden":"true"}},[s._v("#")]),s._v(" Asynchronous Archiving")]),a("p",[s._v("Asynchronous archiving is enabled with the archive-async option. This option enables asynchronous operation for both the archive-push and archive-get commands.")]),a("p",[s._v("A spool path is required. The commands will store transient data here but each command works quite a bit differently so spool path usage is described in detail in each section.")]),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{attrs:{class:"token comment"}},[s._v("# pg-primary ⇒ Create the spool directory")]),s._v("\n"),a("span",{attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),a("span",{attrs:{class:"token function"}},[s._v("mkdir")]),s._v(" -m 750 /var/spool/pgbackrest\n"),a("span",{attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),a("span",{attrs:{class:"token function"}},[s._v("chown")]),s._v(" postgres:postgres /var/spool/pgbackrest\n")])])]),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{attrs:{class:"token comment"}},[s._v("# pg-standby ⇒ Create the spool directory")]),s._v("\n"),a("span",{attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),a("span",{attrs:{class:"token function"}},[s._v("mkdir")]),s._v(" -m 750 /var/spool/pgbackrest\n"),a("span",{attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),a("span",{attrs:{class:"token function"}},[s._v("chown")]),s._v(" postgres:postgres /var/spool/pgbackrest\n")])])]),a("p",[s._v("The spool path must be configured and asynchronous archiving enabled. Asynchronous archiving automatically confers some benefit by reducing the number of connections made to remote storage, but setting process-max can drastically improve performance by parallelizing operations. Be sure not to set "),a("code",[s._v("process-max")]),s._v(" so high that it affects normal database operations.")]),a("div",{staticClass:"language-ini extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ini"}},[a("code",[s._v("# pg-primary:/etc/pgbackrest/pgbackrest.conf ⇒ Configure the spool path and asynchronous archiving\n"),a("span",{attrs:{class:"token selector"}},[s._v("[demo]")]),s._v("\n"),a("span",{attrs:{class:"token constant"}},[s._v("pg1-path")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[s._v("=")]),s._v("/var/lib/postgresql/9.4/demo")]),s._v("\n\n"),a("span",{attrs:{class:"token selector"}},[s._v("[global]")]),s._v("\n"),a("span",{attrs:{class:"token constant"}},[s._v("archive-async")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[s._v("=")]),s._v("y")]),s._v("\n"),a("span",{attrs:{class:"token constant"}},[s._v("log-level-file")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[s._v("=")]),s._v("detail")]),s._v("\n"),a("span",{attrs:{class:"token constant"}},[s._v("repo1-host")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[s._v("=")]),s._v("repository")]),s._v("\n"),a("span",{attrs:{class:"token constant"}},[s._v("spool-path")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[s._v("=")]),s._v("/var/spool/pgbackrest")]),s._v("\n\n"),a("span",{attrs:{class:"token selector"}},[s._v("[global:archive-get]")]),s._v("\n"),a("span",{attrs:{class:"token constant"}},[s._v("process-max")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[s._v("=")]),s._v("2")]),s._v("\n\n"),a("span",{attrs:{class:"token selector"}},[s._v("[global:archive-push]")]),s._v("\n"),a("span",{attrs:{class:"token constant"}},[s._v("process-max")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[s._v("=")]),s._v("2")]),s._v("\n")])])]),a("div",{staticClass:"language-ini extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ini"}},[a("code",[s._v("# pg-standby:/etc/pgbackrest/pgbackrest.conf ⇒ Configure the spool path and asynchronous archiving\n"),a("span",{attrs:{class:"token selector"}},[s._v("[demo]")]),s._v("\n"),a("span",{attrs:{class:"token constant"}},[s._v("pg1-path")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[s._v("=")]),s._v("/var/lib/postgresql/9.4/demo")]),s._v("\n"),a("span",{attrs:{class:"token constant"}},[s._v("recovery-option")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[s._v("=")]),s._v("standby_mode=on")]),s._v("\n"),a("span",{attrs:{class:"token constant"}},[s._v("recovery-option")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[s._v("=")]),s._v("primary_conninfo=host=172.17.0.3 port=5432 user=replicator")]),s._v("\n\n"),a("span",{attrs:{class:"token selector"}},[s._v("[global]")]),s._v("\n"),a("span",{attrs:{class:"token constant"}},[s._v("archive-async")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[s._v("=")]),s._v("y")]),s._v("\n"),a("span",{attrs:{class:"token constant"}},[s._v("log-level-file")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[s._v("=")]),s._v("detail")]),s._v("\n"),a("span",{attrs:{class:"token constant"}},[s._v("repo1-host")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[s._v("=")]),s._v("repository")]),s._v("\n"),a("span",{attrs:{class:"token constant"}},[s._v("spool-path")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[s._v("=")]),s._v("/var/spool/pgbackrest")]),s._v("\n\n"),a("span",{attrs:{class:"token selector"}},[s._v("[global:archive-get]")]),s._v("\n"),a("span",{attrs:{class:"token constant"}},[s._v("process-max")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[s._v("=")]),s._v("2")]),s._v("\n\n"),a("span",{attrs:{class:"token selector"}},[s._v("[global:archive-push]")]),s._v("\n"),a("span",{attrs:{class:"token constant"}},[s._v("process-max")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[s._v("=")]),s._v("2")]),s._v("\n")])])]),a("p",[s._v("Note that "),a("code",[s._v("process-max")]),s._v(" is configured using command sections so that the option is not used by backup and restore. This also allows different values for archive-push and archive-get.\nFor demonstration purposes streaming replication will be broken to force PostgreSQL to get WAL using the restore_command.")]),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{attrs:{class:"token comment"}},[s._v("# pg-primary ⇒ Break streaming replication by changing the replication password")]),s._v("\n"),a("span",{attrs:{class:"token function"}},[s._v("sudo")]),s._v(" -u postgres psql -c "),a("span",{attrs:{class:"token string"}},[s._v("\"alter user replicator password 'bogus'\"")]),s._v("\nALTER ROLE\n")])])]),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{attrs:{class:"token comment"}},[s._v("# pg-standby ⇒ Restart standby to break connection")]),s._v("\n"),a("span",{attrs:{class:"token function"}},[s._v("sudo")]),s._v(" pg_ctlcluster 9.4 demo restart\n")])])]),a("h2",{attrs:{id:"archive-push"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#archive-push","aria-hidden":"true"}},[s._v("#")]),s._v(" Archive Push")]),a("p",[s._v("The asynchronous archive-push command offloads WAL archiving to a separate process (or processes) to improve throughput. It works by looking ahead to see which WAL segments are ready to be archived beyond the request that PostgreSQL is currently making via the archive_command. WAL segments are transferred to the archive directly from the "),a("code",[s._v("pg_xlog/pg_wal")]),s._v(" directory and success is only returned by the archive_command when the WAL segment has been safely stored in the archive.")]),a("p",[s._v("The spool path holds the current status of WAL archiving. Status files written into the spool directory are typically zero length and should consume a minimal amount of space (a few MB at most) and very little IO. All the information in this directory can be recreated so it is not necessary to preserve the spool directory if the cluster is moved to new hardware.")]),a("div",{staticClass:"tip custom-block"},[a("p",{staticClass:"custom-block-title"},[s._v("NOTE:")]),a("p",[s._v("In the original implementation of asynchronous archiving, WAL segments were copied to the spool directory before compression and transfer. The new implementation copies WAL directly from the "),a("code",[s._v("pg_xlog")]),s._v(" directory. If asynchronous archiving was utilized in v1.12 or prior, read the v1.13 release notes carefully before upgrading.")])]),a("p",[s._v("The "),a("code",[s._v("[stanza]-archive-push-async.log")]),s._v(" file can be used to monitor the activity of the asynchronous process. A good way to test this is to quickly push a number of WAL segments.")]),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{attrs:{class:"token comment"}},[s._v("# pg-primary ⇒ Test parallel asynchronous archiving")]),s._v("\n"),a("span",{attrs:{class:"token function"}},[s._v("sudo")]),s._v(" -u postgres psql -c "),a("span",{attrs:{class:"token string"}},[s._v("\" \\\n       select pg_create_restore_point('test async push'); select pg_switch_xlog(); \\\n       select pg_create_restore_point('test async push'); select pg_switch_xlog(); \\\n       select pg_create_restore_point('test async push'); select pg_switch_xlog(); \\\n       select pg_create_restore_point('test async push'); select pg_switch_xlog(); \\\n       select pg_create_restore_point('test async push'); select pg_switch_xlog();\"")]),s._v("\n"),a("span",{attrs:{class:"token function"}},[s._v("sudo")]),s._v(" -u postgres pgbackrest --stanza"),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v("demo --log-level-console"),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v("info check\nP00   INFO: check "),a("span",{attrs:{class:"token function"}},[s._v("command")]),s._v(" begin 2.02: --log-level-console"),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v("info --log-level-file"),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v("detail --log-level-stderr"),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v("off --no-log-timestamp --pg1-path"),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v("/var/lib/postgresql/9.4/demo --repo1-host"),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v("repository --stanza"),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v("demo\nP00   INFO: WAL segment 00000008000000000000002A successfully stored "),a("span",{attrs:{class:"token keyword"}},[s._v("in")]),s._v(" the archive at "),a("span",{attrs:{class:"token string"}},[s._v("'/var/lib/pgbackrest/archive/demo/9.4-1/0000000800000000/00000008000000000000002A-2b54769baadaec580e9b8814868ced3aeef7d951.gz'")]),s._v("\nP00   INFO: check "),a("span",{attrs:{class:"token function"}},[s._v("command")]),s._v(" end: completed successfully\n")])])]),a("p",[s._v("Now the log file will contain parallel, asynchronous activity.")]),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{attrs:{class:"token comment"}},[s._v("# pg-primary ⇒ Check results in the log")]),s._v("\n"),a("span",{attrs:{class:"token function"}},[s._v("sudo")]),s._v(" -u postgres "),a("span",{attrs:{class:"token function"}},[s._v("cat")]),s._v(" /var/log/pgbackrest/demo-archive-push-async.log\n-------------------PROCESS START-------------------\nP00   INFO: archive-push "),a("span",{attrs:{class:"token function"}},[s._v("command")]),s._v(" begin 2.02: "),a("span",{attrs:{class:"token punctuation"}},[s._v("[")]),s._v("pg_xlog/000000080000000000000025"),a("span",{attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" --archive-async --log-level-console"),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v("off --log-level-file"),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v("detail --log-level-stderr"),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v("off --no-log-timestamp --pg1-path"),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v("/var/lib/postgresql/9.4/demo --process-max"),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v("2 --repo1-host"),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v("repository --spool-path"),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v("/var/spool/pgbackrest --stanza"),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v("demo\nP00   INFO: push 2 WAL file"),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" to archive: 000000080000000000000025"),a("span",{attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".000000080000000000000026\nP01 DETAIL: pushed WAL "),a("span",{attrs:{class:"token function"}},[s._v("file")]),s._v(" 000000080000000000000025 to archive\nP02 DETAIL: pushed WAL "),a("span",{attrs:{class:"token function"}},[s._v("file")]),s._v(" 000000080000000000000026 to archive\nP00   INFO: archive-push "),a("span",{attrs:{class:"token function"}},[s._v("command")]),s._v(" end: completed successfully\n\n-------------------PROCESS START-------------------\nP00   INFO: archive-push "),a("span",{attrs:{class:"token function"}},[s._v("command")]),s._v(" begin 2.02: "),a("span",{attrs:{class:"token punctuation"}},[s._v("[")]),s._v("pg_xlog/000000080000000000000027"),a("span",{attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" --archive-async --log-level-console"),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v("off --log-level-file"),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v("detail --log-level-stderr"),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v("off --no-log-timestamp --pg1-path"),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v("/var/lib/postgresql/9.4/demo --process-max"),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v("2 --repo1-host"),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v("repository --spool-path"),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v("/var/spool/pgbackrest --stanza"),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v("demo\nP00   INFO: push 3 WAL file"),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" to archive: 000000080000000000000027"),a("span",{attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".000000080000000000000029\nP01 DETAIL: pushed WAL "),a("span",{attrs:{class:"token function"}},[s._v("file")]),s._v(" 000000080000000000000027 to archive\nP02 DETAIL: pushed WAL "),a("span",{attrs:{class:"token function"}},[s._v("file")]),s._v(" 000000080000000000000028 to archive\nP01 DETAIL: pushed WAL "),a("span",{attrs:{class:"token function"}},[s._v("file")]),s._v(" 000000080000000000000029 to archive\nP00   INFO: archive-push "),a("span",{attrs:{class:"token function"}},[s._v("command")]),s._v(" end: completed successfully\n\n-------------------PROCESS START-------------------\nP00   INFO: archive-push "),a("span",{attrs:{class:"token function"}},[s._v("command")]),s._v(" begin 2.02: "),a("span",{attrs:{class:"token punctuation"}},[s._v("[")]),s._v("pg_xlog/00000008000000000000002A"),a("span",{attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" --archive-async --log-level-console"),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v("off --log-level-file"),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v("detail --log-level-stderr"),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v("off --no-log-timestamp --pg1-path"),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v("/var/lib/postgresql/9.4/demo --process-max"),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v("2 --repo1-host"),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v("repository --spool-path"),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v("/var/spool/pgbackrest --stanza"),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v("demo\nP00   INFO: push 1 WAL file"),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" to archive: 00000008000000000000002A\nP01 DETAIL: pushed WAL "),a("span",{attrs:{class:"token function"}},[s._v("file")]),s._v(" 00000008000000000000002A to archive\nP00   INFO: archive-push "),a("span",{attrs:{class:"token function"}},[s._v("command")]),s._v(" end: completed successfully\n")])])]),a("h2",{attrs:{id:"archive-get"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#archive-get","aria-hidden":"true"}},[s._v("#")]),s._v(" Archive Get")]),a("p",[s._v("The asynchronous archive-get command maintains a local queue of WAL to improve throughput. If a WAL segment is not found in the queue it is fetched from the repository along with enough consecutive WAL to fill the queue. The maximum size of the queue is defined by archive-get-queue-max. Whenever the queue is less than half full more WAL will be fetched to fill it.")]),a("p",[s._v("Asynchronous operation is most useful in environments that generate a lot of WAL or have a high latency connection to the repository storage (i.e., S3). In the case of a high latency connection it may be a good idea to increase "),a("code",[s._v("process-max")]),s._v(".\nThe "),a("code",[s._v("[stanza]-archive-get-async.log")]),s._v(" file can be used to monitor the activity of the asynchronous process.")]),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{attrs:{class:"token comment"}},[s._v("# pg-standby ⇒ Check results in the log")]),s._v("\n"),a("span",{attrs:{class:"token function"}},[s._v("sudo")]),s._v(" -u postgres "),a("span",{attrs:{class:"token function"}},[s._v("cat")]),s._v(" /var/log/pgbackrest/demo-archive-get-async.log\n-------------------PROCESS START-------------------\nP00   INFO: archive-get "),a("span",{attrs:{class:"token function"}},[s._v("command")]),s._v(" begin 2.02: "),a("span",{attrs:{class:"token punctuation"}},[s._v("[")]),s._v("000000080000000000000023, 000000080000000000000024, 000000080000000000000025, 000000080000000000000026, 000000080000000000000027, 000000080000000000000028, 000000080000000000000029, 00000008000000000000002A"),a("span",{attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" --archive-async --log-level-console"),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v("off --log-level-file"),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v("detail --log-level-stderr"),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v("off --no-log-timestamp --pg1-path"),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v("/var/lib/postgresql/9.4/demo --process-max"),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v("2 --repo1-host"),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v("repository --spool-path"),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v("/var/spool/pgbackrest --stanza"),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v("demo\nP00   INFO: get 8 WAL file"),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" from archive: 000000080000000000000023"),a("span",{attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".00000008000000000000002A\nP01 DETAIL: got WAL "),a("span",{attrs:{class:"token function"}},[s._v("file")]),s._v(" 000000080000000000000023 from archive\nP02 DETAIL: got WAL "),a("span",{attrs:{class:"token function"}},[s._v("file")]),s._v(" 000000080000000000000024 from archive\nP01 DETAIL: WAL "),a("span",{attrs:{class:"token function"}},[s._v("file")]),s._v(" 000000080000000000000025 not found "),a("span",{attrs:{class:"token keyword"}},[s._v("in")]),s._v(" archive\nP02 DETAIL: WAL "),a("span",{attrs:{class:"token function"}},[s._v("file")]),s._v(" 000000080000000000000026 not found "),a("span",{attrs:{class:"token keyword"}},[s._v("in")]),s._v(" archive\n       "),a("span",{attrs:{class:"token punctuation"}},[s._v("[")]),s._v("filtered 33 lines of output"),a("span",{attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\nP00   INFO: archive-get "),a("span",{attrs:{class:"token function"}},[s._v("command")]),s._v(" begin 2.02: "),a("span",{attrs:{class:"token punctuation"}},[s._v("[")]),s._v("000000080000000000000025, 000000080000000000000026, 000000080000000000000027, 000000080000000000000028, 000000080000000000000029, 00000008000000000000002A, 00000008000000000000002B, 00000008000000000000002C"),a("span",{attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" --archive-async --log-level-console"),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v("off --log-level-file"),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v("detail --log-level-stderr"),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v("off --no-log-timestamp --pg1-path"),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v("/var/lib/postgresql/9.4/demo --process-max"),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v("2 --repo1-host"),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v("repository --spool-path"),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v("/var/spool/pgbackrest --stanza"),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v("demo\nP00   INFO: get 8 WAL file"),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" from archive: 000000080000000000000025"),a("span",{attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".00000008000000000000002C\nP01 DETAIL: got WAL "),a("span",{attrs:{class:"token function"}},[s._v("file")]),s._v(" 000000080000000000000025 from archive\nP02 DETAIL: got WAL "),a("span",{attrs:{class:"token function"}},[s._v("file")]),s._v(" 000000080000000000000026 from archive\nP01 DETAIL: got WAL "),a("span",{attrs:{class:"token function"}},[s._v("file")]),s._v(" 000000080000000000000027 from archive\nP02 DETAIL: got WAL "),a("span",{attrs:{class:"token function"}},[s._v("file")]),s._v(" 000000080000000000000028 from archive\nP02 DETAIL: WAL "),a("span",{attrs:{class:"token function"}},[s._v("file")]),s._v(" 00000008000000000000002A not found "),a("span",{attrs:{class:"token keyword"}},[s._v("in")]),s._v(" archive\nP02 DETAIL: WAL "),a("span",{attrs:{class:"token function"}},[s._v("file")]),s._v(" 00000008000000000000002B not found "),a("span",{attrs:{class:"token keyword"}},[s._v("in")]),s._v(" archive\nP02 DETAIL: WAL "),a("span",{attrs:{class:"token function"}},[s._v("file")]),s._v(" 00000008000000000000002C not found "),a("span",{attrs:{class:"token keyword"}},[s._v("in")]),s._v(" archive\nP01 DETAIL: got WAL "),a("span",{attrs:{class:"token function"}},[s._v("file")]),s._v(" 000000080000000000000029 from archive\nP00   INFO: archive-get "),a("span",{attrs:{class:"token function"}},[s._v("command")]),s._v(" end: completed successfully\n\n       "),a("span",{attrs:{class:"token punctuation"}},[s._v("[")]),s._v("filtered 5 lines of output"),a("span",{attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\nP02 DETAIL: WAL "),a("span",{attrs:{class:"token function"}},[s._v("file")]),s._v(" 00000008000000000000002D not found "),a("span",{attrs:{class:"token keyword"}},[s._v("in")]),s._v(" archive\nP02 DETAIL: WAL "),a("span",{attrs:{class:"token function"}},[s._v("file")]),s._v(" 00000008000000000000002E not found "),a("span",{attrs:{class:"token keyword"}},[s._v("in")]),s._v(" archive\nP01 DETAIL: got WAL "),a("span",{attrs:{class:"token function"}},[s._v("file")]),s._v(" 00000008000000000000002A from archive\nP00   INFO: archive-get "),a("span",{attrs:{class:"token function"}},[s._v("command")]),s._v(" end: completed successfully\n\n       "),a("span",{attrs:{class:"token punctuation"}},[s._v("[")]),s._v("filtered 24 lines of output"),a("span",{attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])])]),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{attrs:{class:"token comment"}},[s._v("# pg-primary ⇒ Fix streaming replication by changing the replication password")]),s._v("\n"),a("span",{attrs:{class:"token function"}},[s._v("sudo")]),s._v(" -u postgres psql -c "),a("span",{attrs:{class:"token string"}},[s._v("\"alter user replicator password 'jw8s0F4'\"")]),s._v("\nALTER ROLE\n")])])])])}],!1,null,null,null);t.default=e.exports}}]);
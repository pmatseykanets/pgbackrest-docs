(window.webpackJsonp=window.webpackJsonp||[]).push([[42],{158:function(t,s,a){"use strict";a.r(s);var e=a(0),n=Object(e.a)({},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"content"},[t._m(0),a("p",[t._v("Restore a Backup in "),a("router-link",{attrs:{to:"/guide/quick_start.html"}},[t._v("Quick Start")]),t._v(" performed default recovery, which is to play all the way to the end of the WAL stream. In the case of a hardware failure this is usually the best choice but for data corruption scenarios (whether machine or human in origin) Point-in-Time Recovery (PITR) is often more appropriate.")],1),a("p",[t._v("Point-in-Time Recovery (PITR) allows the WAL to be played from the last backup to a specified time, transaction id, or recovery point. For common recovery scenarios time-based recovery is arguably the most useful. A typical recovery scenario is to restore a table that was accidentally dropped or data that was accidentally deleted. Recovering a dropped table is more dramatic so that's the example given here but deleted data would be recovered in exactly the same way.")]),t._m(1),a("p",[t._v("It is important to represent the time as reckoned by PostgreSQL and to include timezone offsets. This reduces the possibility of unintended timezone conversions and an unexpected recovery result.")]),t._m(2),a("p",[t._v("Now that the time has been recorded the table is dropped. In practice finding the exact time that the table was dropped is a lot harder than in this example. It may not be possible to find the exact time, but some forensic work should be able to get you close.")]),t._m(3),a("p",[t._v("Now the restore can be performed with time-based recovery to bring back the missing table.")]),t._m(4),t._m(5),t._m(6),a("p",[t._v("The PostgreSQL log also contains valuable information. It will indicate the time and transaction where the recovery stopped and also give the time of the last transaction to be applied.")]),t._m(7),a("p",[t._v("This example was rigged to give the correct result. If a backup after the required time is chosen then PostgreSQL will not be able to recover the lost table. PostgreSQL can only play forward, not backward. To demonstrate this the important table must be dropped (again).")]),t._m(8),a("p",[t._v("Now take a new backup and attempt recovery from the new backup.")]),t._m(9),a("p",[t._v('Looking at the log output it\'s not obvious that recovery failed to restore the table. The key is to look for the presence of the "recovery stopping before..." and "last completed transaction..." log messages. If they are not present then the recovery to the specified point-in-time was not successful.')]),t._m(10),a("p",[t._v("Using an earlier backup will allow PostgreSQL to play forward to the correct time. The info command can be used to find the next to last backup.")]),t._m(11),t._m(12),t._m(13),a("p",[t._v("Now the the log output will contain the expected recovery stopping before... and last completed transaction... messages showing that the recovery was successful.")]),t._m(14)])},[function(){var t=this.$createElement,s=this._self._c||t;return s("h1",{attrs:{id:"point-in-time-recovery"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#point-in-time-recovery","aria-hidden":"true"}},[this._v("#")]),this._v(" Point In Time Recovery")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("# pg-primary ⇒ Backup the demo cluster and create a table with very important data")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("sudo")]),t._v(" -u postgres pgbackrest --stanza"),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v("demo --type"),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v("diff backup\n"),a("span",{attrs:{class:"token function"}},[t._v("sudo")]),t._v(" -u postgres psql -c "),a("span",{attrs:{class:"token string"}},[t._v("\"begin; \\\n       create table important_table (message text); \\\n       insert into important_table values ('Important Data'); \\\n       commit; \\\n       select * from important_table;\"")]),t._v("\n    message\n----------------\n Important Data\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("1 row"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{attrs:{class:"token comment"}},[this._v("# pg-primary ⇒ Get the time from PostgreSQL")]),this._v("\n"),s("span",{attrs:{class:"token function"}},[this._v("sudo")]),this._v(" -u postgres psql -Atc "),s("span",{attrs:{class:"token string"}},[this._v('"select current_timestamp"')]),this._v("\n2018-05-06 15:17:58.783787+00\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("# pg-primary ⇒ Drop the important table")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("sudo")]),t._v(" -u postgres psql -c "),a("span",{attrs:{class:"token string"}},[t._v('"begin; \\\n       drop table important_table; \\\n       commit; \\\n       select * from important_table;"')]),t._v("\nERROR:  relation "),a("span",{attrs:{class:"token string"}},[t._v('"important_table"')]),t._v(" does not exist\nLINE 1: "),a("span",{attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".le important_table"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("     commit"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("     "),a("span",{attrs:{class:"token keyword"}},[t._v("select")]),t._v(" * from important_"),a("span",{attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n                                                             ^\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("# pg-primary ⇒ Stop PostgreSQL, restore the demo cluster to 2018-05-06 15:17:58.783787+00, and display recovery.conf")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("sudo")]),t._v(" pg_ctlcluster 9.4 demo stop\n"),a("span",{attrs:{class:"token function"}},[t._v("sudo")]),t._v(" -u postgres pgbackrest --stanza"),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v("demo --delta \\\n       --type"),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v("time "),a("span",{attrs:{class:"token string"}},[t._v('"--target=2018-05-06 15:17:58.783787+00"')]),t._v(" restore\n"),a("span",{attrs:{class:"token function"}},[t._v("sudo")]),t._v(" -u postgres "),a("span",{attrs:{class:"token function"}},[t._v("cat")]),t._v(" /var/lib/postgresql/9.4/demo/recovery.conf\nrestore_command "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'pgbackrest --stanza=demo archive-get %f \"%p\"'")]),t._v("\nrecovery_target_time "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'2018-05-06 15:17:58.783787+00'")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("The "),s("code",[this._v("recovery.conf")]),this._v(" file has been automatically generated by pgBackRest so PostgreSQL can be started immediately. Once PostgreSQL has finished recovery the table will exist again and can be queried.")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("# pg-primary ⇒ Start PostgreSQL and check that the important table exists")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("sudo")]),t._v(" pg_ctlcluster 9.4 demo start\n"),a("span",{attrs:{class:"token function"}},[t._v("sudo")]),t._v(" -u postgres psql -c "),a("span",{attrs:{class:"token string"}},[t._v('"select * from important_table"')]),t._v("\n    message\n----------------\n Important Data\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("1 row"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("# pg-primary ⇒ Examine the PostgreSQL log output")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("sudo")]),t._v(" -u postgres "),a("span",{attrs:{class:"token function"}},[t._v("cat")]),t._v(" /var/log/postgresql/postgresql-9.4-demo.log\nLOG:  database system was interrupted"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" last known up at 2018-05-06 15:17:54 UTC\nLOG:  starting point-in-time recovery to 2018-05-06 15:17:58.783787+00\nLOG:  restored log "),a("span",{attrs:{class:"token function"}},[t._v("file")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v('"00000004.history"')]),t._v(" from archive\nLOG:  restored log "),a("span",{attrs:{class:"token function"}},[t._v("file")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v('"000000040000000000000019"')]),t._v(" from archive\nLOG:  redo starts at 0/19000028\nLOG:  consistent recovery state reached at 0/190000F0\nLOG:  restored log "),a("span",{attrs:{class:"token function"}},[t._v("file")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v('"00000004000000000000001A"')]),t._v(" from archive\nLOG:  recovery stopping before commit of transaction 689, "),a("span",{attrs:{class:"token function"}},[t._v("time")]),t._v(" 2018-05-06 15:17:58.990914+00\nLOG:  redo "),a("span",{attrs:{class:"token keyword"}},[t._v("done")]),t._v(" at 0/1A016E48\nLOG:  last completed transaction was at log "),a("span",{attrs:{class:"token function"}},[t._v("time")]),t._v(" 2018-05-06 15:17:58.563866+00\nLOG:  incomplete startup packet\nLOG:  selected new timeline ID: 5\n       "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("filtered 5 lines of output"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("# pg-primary ⇒ Drop the important table (again)")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("sudo")]),t._v(" -u postgres psql -c "),a("span",{attrs:{class:"token string"}},[t._v('"begin; \\\n       drop table important_table; \\\n       commit; \\\n       select * from important_table;"')]),t._v("\nERROR:  relation "),a("span",{attrs:{class:"token string"}},[t._v('"important_table"')]),t._v(" does not exist\nLINE 1: "),a("span",{attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".le important_table"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("     commit"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("     "),a("span",{attrs:{class:"token keyword"}},[t._v("select")]),t._v(" * from important_"),a("span",{attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n                                                             ^\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("# pg-primary ⇒ Perform a backup then attempt recovery from that backup")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("sudo")]),t._v(" -u postgres pgbackrest --stanza"),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v("demo --type"),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v("incr backup\n"),a("span",{attrs:{class:"token function"}},[t._v("sudo")]),t._v(" pg_ctlcluster 9.4 demo stop\n"),a("span",{attrs:{class:"token function"}},[t._v("sudo")]),t._v(" -u postgres pgbackrest --stanza"),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v("demo --delta \\\n       --type"),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v("time "),a("span",{attrs:{class:"token string"}},[t._v('"--target=2018-05-06 15:17:58.783787+00"')]),t._v(" restore\n"),a("span",{attrs:{class:"token function"}},[t._v("sudo")]),t._v(" pg_ctlcluster 9.4 demo start\n"),a("span",{attrs:{class:"token function"}},[t._v("sudo")]),t._v(" -u postgres psql -c "),a("span",{attrs:{class:"token string"}},[t._v('"select * from important_table"')]),t._v("\nERROR:  relation "),a("span",{attrs:{class:"token string"}},[t._v('"important_table"')]),t._v(" does not exist\nLINE 1: "),a("span",{attrs:{class:"token keyword"}},[t._v("select")]),t._v(" * from important_table\n                      ^\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("pg-primary ⇒ Examine the PostgreSQL log output to discover the recovery was not successful\n"),a("span",{attrs:{class:"token function"}},[t._v("sudo")]),t._v(" -u postgres "),a("span",{attrs:{class:"token function"}},[t._v("cat")]),t._v(" /var/log/postgresql/postgresql-9.4-demo.log\nLOG:  database system was interrupted"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" last known up at 2018-05-06 15:18:09 UTC\nLOG:  starting point-in-time recovery to 2018-05-06 15:17:58.783787+00\nLOG:  restored log "),a("span",{attrs:{class:"token function"}},[t._v("file")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v('"00000005.history"')]),t._v(" from archive\nLOG:  restored log "),a("span",{attrs:{class:"token function"}},[t._v("file")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v('"00000005000000000000001B"')]),t._v(" from archive\nLOG:  redo starts at 0/1B000028\nLOG:  consistent recovery state reached at 0/1B0000F0\nLOG:  redo "),a("span",{attrs:{class:"token keyword"}},[t._v("done")]),t._v(" at 0/1B0000F0\nLOG:  incomplete startup packet\n       "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("filtered 10 lines of output"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("# pg-primary ⇒ Get backup info for the demo cluster")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("sudo")]),t._v(" -u postgres pgbackrest info\nstanza: demo\n    status: ok\n\n    db "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("current"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        wal archive min/max "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("9.4-1"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(": 00000002000000000000000B / 00000005000000000000001B\n\n        full backup: 20180506-151655F\n            timestamp start/stop: 2018-05-06 15:16:55 / 2018-05-06 15:17:02\n            wal start/stop: 00000002000000000000000B / 00000002000000000000000B\n            database size: 19.2MB, backup size: 19.2MB\n            repository size: 2.2MB, repository backup size: 2.2MB\n\n        full backup: 20180506-151702F\n            timestamp start/stop: 2018-05-06 15:17:02 / 2018-05-06 15:17:08\n            wal start/stop: 00000002000000000000000C / 00000002000000000000000C\n            database size: 19.2MB, backup size: 19.2MB\n            repository size: 2.2MB, repository backup size: 2.2MB\n\n        "),a("span",{attrs:{class:"token function"}},[t._v("diff")]),t._v(" backup: 20180506-151702F_20180506-151724D\n            timestamp start/stop: 2018-05-06 15:17:24 / 2018-05-06 15:17:27\n            wal start/stop: 000000020000000000000014 / 000000020000000000000014\n            database size: 19.2MB, backup size: 8.2KB\n            repository size: 2.2MB, repository backup size: 400B\n            backup reference list: 20180506-151702F\n\n        incr backup: 20180506-151702F_20180506-151737I\n            timestamp start/stop: 2018-05-06 15:17:37 / 2018-05-06 15:17:42\n            wal start/stop: 000000030000000000000016 / 000000030000000000000016\n            database size: 31.7MB, backup size: 12.6MB\n            repository size: 3.7MB, repository backup size: 1.5MB\n            backup reference list: 20180506-151702F\n        "),a("span",{attrs:{class:"token function"}},[t._v("diff")]),t._v(" backup: 20180506-151702F_20180506-151753D\n            timestamp start/stop: 2018-05-06 15:17:53 / 2018-05-06 15:17:58\n            wal start/stop: 000000040000000000000019 / 000000040000000000000019\n            database size: 25.5MB, backup size: 6.3MB\n            repository size: 3MB, repository backup size: 781KB\n            backup reference list: 20180506-151702F\n\n        incr backup: 20180506-151702F_20180506-151807I\n            timestamp start/stop: 2018-05-06 15:18:07 / 2018-05-06 15:18:11\n            wal start/stop: 00000005000000000000001B / 00000005000000000000001B\n            database size: 25.5MB, backup size: 1.7MB\n            repository size: 3MB, repository backup size: 201.5KB\n            backup reference list: 20180506-151702F, 20180506-151702F_20180506-151753D\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("The default behavior for restore is to use the last backup but an earlier backup can be specified with the "),s("code",[this._v("--set")]),this._v(" option.")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("# pg-primary ⇒ Stop PostgreSQL, restore from the selected backup, and start PostgreSQL")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("sudo")]),t._v(" pg_ctlcluster 9.4 demo stop\n"),a("span",{attrs:{class:"token function"}},[t._v("sudo")]),t._v(" -u postgres pgbackrest --stanza"),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v("demo --delta \\\n       --type"),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v("time "),a("span",{attrs:{class:"token string"}},[t._v('"--target=2018-05-06 15:17:58.783787+00"')]),t._v(" \\\n       --set"),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v("20180506-151702F_20180506-151753D restore\n"),a("span",{attrs:{class:"token function"}},[t._v("sudo")]),t._v(" pg_ctlcluster 9.4 demo start\n"),a("span",{attrs:{class:"token function"}},[t._v("sudo")]),t._v(" -u postgres psql -c "),a("span",{attrs:{class:"token string"}},[t._v('"select * from important_table"')]),t._v("\n    message\n----------------\n Important Data\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("1 row"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("# pg-primary ⇒ Examine the PostgreSQL log output for log messages indicating success")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("sudo")]),t._v(" -u postgres "),a("span",{attrs:{class:"token function"}},[t._v("cat")]),t._v(" /var/log/postgresql/postgresql-9.4-demo.log\nLOG:  database system was interrupted"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" last known up at 2018-05-06 15:17:54 UTC\nLOG:  starting point-in-time recovery to 2018-05-06 15:17:58.783787+00\nLOG:  restored log "),a("span",{attrs:{class:"token function"}},[t._v("file")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v('"00000004.history"')]),t._v(" from archive\nLOG:  restored log "),a("span",{attrs:{class:"token function"}},[t._v("file")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v('"000000040000000000000019"')]),t._v(" from archive\nLOG:  redo starts at 0/19000028\nLOG:  consistent recovery state reached at 0/190000F0\nLOG:  restored log "),a("span",{attrs:{class:"token function"}},[t._v("file")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v('"00000004000000000000001A"')]),t._v(" from archive\nLOG:  recovery stopping before commit of transaction 689, "),a("span",{attrs:{class:"token function"}},[t._v("time")]),t._v(" 2018-05-06 15:17:58.990914+00\nLOG:  redo "),a("span",{attrs:{class:"token keyword"}},[t._v("done")]),t._v(" at 0/1A016E48\nLOG:  last completed transaction was at log "),a("span",{attrs:{class:"token function"}},[t._v("time")]),t._v(" 2018-05-06 15:17:58.563866+00\nLOG:  incomplete startup packet\nLOG:  restored log "),a("span",{attrs:{class:"token function"}},[t._v("file")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v('"00000005.history"')]),t._v(" from archive\n       "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("filtered 8 lines of output"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])])}],!1,null,null,null);s.default=n.exports}}]);